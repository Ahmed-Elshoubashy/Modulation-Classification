{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "4962_5044_4884_5063_proj3.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IKCQwzgs2C14",
        "colab_type": "text"
      },
      "source": [
        "**Get the data as .tar file**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F3R6V2D-13_8",
        "colab_type": "code",
        "outputId": "3f7a5c1f-7a36-4714-f370-030eb8c7645c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        }
      },
      "source": [
        "!wget http://opendata.deepsig.io/datasets/2016.10/RML2016.10b.tar.bz2"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-05-07 05:07:29--  http://opendata.deepsig.io/datasets/2016.10/RML2016.10b.tar.bz2\n",
            "Resolving opendata.deepsig.io (opendata.deepsig.io)... 52.14.91.165\n",
            "Connecting to opendata.deepsig.io (opendata.deepsig.io)|52.14.91.165|:80... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 1245608913 (1.2G) [application/x-bzip2]\n",
            "Saving to: ‘RML2016.10b.tar.bz2’\n",
            "\n",
            "RML2016.10b.tar.bz2 100%[===================>]   1.16G  7.35MB/s    in 3m 3s   \n",
            "\n",
            "2020-05-07 05:10:32 (6.50 MB/s) - ‘RML2016.10b.tar.bz2’ saved [1245608913/1245608913]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pTzEz1sK2FOu",
        "colab_type": "text"
      },
      "source": [
        "**Extract the file**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f-EvTRIz2KGK",
        "colab_type": "code",
        "outputId": "988033cf-1947-426a-e097-5b5a8651f7d9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "!tar xjvf RML2016.10b.tar.bz2"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RML2016.10b.dat\n",
            "LICENSE.TXT\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LfQbdPIuvB1h",
        "colab_type": "text"
      },
      "source": [
        "**Required imports**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yPuLNINouRq4",
        "colab_type": "code",
        "outputId": "bd7df6f8-923d-4b8c-d96b-0b4db93491b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "import os\n",
        "import pickle\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from scipy import integrate\n",
        "from sklearn import tree\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import keras\n",
        "from keras import backend as K\n",
        "from keras import optimizers ,losses\n",
        "from keras.utils import to_categorical \n",
        "from keras.layers import Input, Dense , Conv1D, Conv2D, Flatten , LSTM, Embedding\n",
        "from keras.callbacks import EarlyStopping \n",
        "from keras.models import Model, Sequential\n",
        "import gc  "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iCAoSCds2Qqo",
        "colab_type": "text"
      },
      "source": [
        "**Read the data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gxgYv3c-2PzL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "raw_data = pickle.load(open(os.getcwd() + '/RML2016.10b.dat',\"rb\"),encoding = 'bytes')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mf3Ig8UB2UQ2",
        "colab_type": "text"
      },
      "source": [
        "**Giving each type of modulation a unique number and map it to this number**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l1p87qu72Yng",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mod_type = {}\n",
        "i = 0\n",
        "for key in raw_data.keys():\n",
        "  if not key[0] in mod_type.keys():\n",
        "    mod_type[key[0]] = i\n",
        "    i+=1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qho-9NjR3kRS",
        "colab_type": "text"
      },
      "source": [
        "**Prepare the data in multi dimension array**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l4H934AD2fkE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = np.zeros((20,10,6000,2,128))\n",
        "for key in raw_data.keys():\n",
        "  key1 = key[0]\n",
        "  key2 = key[1]\n",
        "  data[(key2+20)//2][mod_type[key1]] = raw_data[key]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VELJTZqh3fJx",
        "colab_type": "text"
      },
      "source": [
        "**Reshape the data to make the samples over each other and dimensions beside each other**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J46zvZYy3gDd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = data.reshape([20,60000,2,128]) \n",
        "data = data.reshape([20,60000,256]) "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x0ljyInQ30S3",
        "colab_type": "text"
      },
      "source": [
        "**Assign the labels ( after reshape each successive 6k samples has the same label)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sDSDwNOd3xrM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_ground = np.zeros((60000))\n",
        "for i in range(60000):\n",
        "  y_ground[i] = i//6000;"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lzBz5SbK39Nb",
        "colab_type": "text"
      },
      "source": [
        "**Function to split the data to training,validatin and test data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PYJEq98x4Gsy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        " def splitting_data(data,y_ground,dim):\n",
        "  x_train_validation = np.zeros((20,42000, dim*128))\n",
        "  x_test = np.zeros((20,18000, dim*128))\n",
        "  y_train_validation = np.zeros((20,42000))\n",
        "  y_test = np.zeros((20,18000)) \n",
        "\n",
        "  for i in range(0,20):\n",
        "    x_train_validation[i],x_test[i],y_train_validation[i],y_test[i] = train_test_split(data[i],y_ground,test_size=0.3,random_state = 0,stratify=y_ground)\n",
        "  \n",
        "  x_train = np.zeros((20,39900, dim*128))\n",
        "  x_validation = np.zeros((20,2100, dim*128))\n",
        "  y_train = np.zeros((20,39900))\n",
        "  y_validation = np.zeros((20,2100)) \n",
        "\n",
        "  for i in range(0,20):\n",
        "    x_train[i],x_validation[i],y_train[i],y_validation[i] = train_test_split(x_train_validation[i],y_train_validation[i],test_size=0.05,random_state = 0,stratify = y_train_validation[i])\n",
        "  \n",
        "  return x_train , x_validation ,x_test ,y_train , y_validation ,y_test"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-p8t7Nbvtjv",
        "colab_type": "text"
      },
      "source": [
        "**Function to draw accuracies against SNR and get the mean of accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZmmmuZBzvswa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def draw(accuracy, type = 'last classification technique'):\n",
        "  x_pts = []\n",
        "  for i in range(-20,20, 2):\n",
        "    x_pts.append(i)\n",
        "  x_pts = np.array(x_pts)\n",
        "  plt.plot(x_pts, accuracy)\n",
        "  plt.grid(True)\n",
        "  plt.title('Accuracies of {}'.format(type))\n",
        "  plt.xlabel('SNR')\n",
        "  plt.ylabel('Accuracy')\n",
        "  print('Mean accuracy = ', np.mean(accuracy))\n",
        "  print('Accuracy at 0 SNR = ', accuracy[10])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2l0ONljD87HH",
        "colab_type": "text"
      },
      "source": [
        "**Function to predict using logistic regression**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZzL_PAXR9ATc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def logistic_regression(train_data , train_labels , test_data ,test_labels):\n",
        "  logistic_reg_accuracy = np.zeros((20))\n",
        "  snr = -20\n",
        "  for i in range(0,20):\n",
        "    clf = LogisticRegression(random_state=0, max_iter = 1000).fit(train_data[i],train_labels[i])\n",
        "    y_pred = clf.predict(test_data[i])\n",
        "    acc = metrics.accuracy_score(test_labels[i], y_pred)\n",
        "    logistic_reg_accuracy[i] = acc\n",
        "    print('at SNR:',(snr),\" Accuracy:\", acc)\n",
        "    snr+=2\n",
        "  con_matrix = confusion_matrix(test_labels[19], y_pred)\n",
        "  print('confusion matrix at SNR = 18')\n",
        "  print(con_matrix)\n",
        "  draw(logistic_reg_accuracy,'Classification using logistic regression')\n",
        "  return logistic_reg_accuracy\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qja-xUSr5fEt",
        "colab_type": "text"
      },
      "source": [
        "**Function to get the decsion tree**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pavr_2qk5l_0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        " def decision_tree(train_data , train_labels , test_data ,test_labels):\n",
        "  tree_accuracy = np.zeros((20))\n",
        "  snr = -20\n",
        "  for i in range(0,20):\n",
        "    clf = tree.DecisionTreeClassifier()\n",
        "    clf = clf.fit(train_data[i],train_labels[i])\n",
        "    y_pred = clf.predict(test_data[i])\n",
        "    acc = metrics.accuracy_score(test_labels[i], y_pred)\n",
        "    tree_accuracy[i] = acc\n",
        "    print('at SNR:',(snr),\" Accuracy:\", acc)\n",
        "    snr+=2\n",
        "  con_matrix = confusion_matrix(test_labels[19], y_pred)\n",
        "  print('confusion matrix at SNR = 18')\n",
        "  print(con_matrix)\n",
        "  draw(tree_accuracy,'Classification using decision tree')\n",
        "  return tree_accuracy"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6-fSoD1A7xzL",
        "colab_type": "text"
      },
      "source": [
        "**Function to get predict using random forest classifier**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A5h7EYNb7ji6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Random_forest(train_data , train_labels , test_data ,test_labels):\n",
        "  forest_accuracy = np.zeros((20))\n",
        "  snr = -20\n",
        "  for i in range(20):\n",
        "    clf = RandomForestClassifier(n_estimators=100,random_state=0,max_depth = 20)\n",
        "    clf.fit(train_data[i], train_labels[i])\n",
        "    y_pred = clf.predict(test_data[i])\n",
        "    acc = metrics.accuracy_score(test_labels[i], y_pred)\n",
        "    forest_accuracy[i] = acc\n",
        "    print('at SNR:',(snr),\" Accuracy:\", acc)\n",
        "    snr+=2\n",
        "  con_matrix = confusion_matrix(test_labels[19], y_pred)\n",
        "  print('confusion matrix at SNR = 18')\n",
        "  print(con_matrix)\n",
        "  draw(forest_accuracy,'Classification using Random forest')\n",
        "  return forest_accuracy"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PKzYpeu89_Am",
        "colab_type": "text"
      },
      "source": [
        "**Function to find DNN**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "goABUvEH-SHR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        " def DNN_predict(train_data , train_labels , test_data ,test_labels , dim):\n",
        "  snr = -20\n",
        "  dnn_accuracy = np.zeros((20))\n",
        "  for i in range(20):\n",
        "  \n",
        "    #inputs = Input(shape=(128*dim, ))\n",
        "    #output = Dense(10, activation='relu')(inputs)\n",
        "    #model = Model(inputs=inputs, outputs=output)\n",
        "\n",
        "    model = Sequential()\n",
        "    model.add(Dense(512, activation='relu', input_dim=128*dim))\n",
        "    model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "    es = EarlyStopping(monitor='loss', mode='min', verbose=0)\n",
        "    model.fit(train_data[i], train_labels[i],  epochs= 50, batch_size = 1024, verbose = 0, shuffle='batch', callbacks=[es])\n",
        "    predictions = model.predict(test_data[i])\n",
        "    y_pred = np.zeros((test_labels.shape[1], 1))\n",
        "    for k,prediction in enumerate(predictions):\n",
        "      mx, choice = 0, 0\n",
        "      for j in range(10):\n",
        "        if prediction[j] > mx:\n",
        "          mx = prediction[j]\n",
        "          choice = j\n",
        "      y_pred[k] = choice\n",
        "    acc = metrics.accuracy_score(test_labels[i], y_pred)\n",
        "    dnn_accuracy[i] = acc\n",
        "    print('at SNR:',(snr),\" Accuracy:\", acc)\n",
        "    snr+=2\n",
        "  con_matrix = confusion_matrix(test_labels[19], y_pred)\n",
        "  print('confusion matrix at SNR = 18')\n",
        "  print(con_matrix)\n",
        "  draw(dnn_accuracy,'calssification using DNN')\n",
        "  return dnn_accuracy  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j-onroV8DKlH",
        "colab_type": "text"
      },
      "source": [
        "**Predict using CNN**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PBvLBx9bBbS5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def CNN_predict(train_data , train_labels , test_data ,test_labels , dim):  \n",
        "\n",
        "  snr = -20\n",
        "  cnn_accuracy = np.zeros((20))\n",
        "  for i in range(20):\n",
        "    curr_input = train_data[i].reshape((39900, dim, 128,1))\n",
        "    curr_validation = test_data[i].reshape((18000,dim, 128,1))\n",
        "\n",
        "    curr_y_train = keras.utils.to_categorical(train_labels[i], 10)\n",
        "    curr_y_validation = keras.utils.to_categorical(test_labels[i], 10)\n",
        "\n",
        "    vision_model = Sequential()\n",
        "    vision_model.add(Conv2D(64, (1,3), activation='relu', padding='same', input_shape=(dim, 128, 1)))\n",
        "    vision_model.add(Conv2D(16, (2, 3), activation='relu'))\n",
        "    vision_model.add(Flatten())\n",
        "    vision_model.add(Dense(128, activation='relu'))\n",
        "    vision_model.add(Dense(10, activation='softmax'))\n",
        "    vision_model.model.compile('adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "    vision_model.fit(curr_input, curr_y_train, epochs=20,use_multiprocessing = True, batch_size= 1024, shuffle = 'batch',verbose = 0)\n",
        "    predictions = vision_model.predict(curr_validation)\n",
        "    y_pred = np.zeros((test_labels.shape[1], 1))\n",
        "    for k,prediction in enumerate(predictions):\n",
        "      mx, choice = 0, 0\n",
        "      for j in range(10):\n",
        "        if prediction[j] > mx:\n",
        "          mx = prediction[j]\n",
        "          choice = j\n",
        "      y_pred[k] = choice\n",
        "    acc = metrics.accuracy_score(test_labels[i], y_pred)\n",
        "    cnn_accuracy[i] = acc\n",
        "    print('at SNR:',(snr),\" Accuracy:\", acc)\n",
        "    snr+=2\n",
        "  con_matrix = confusion_matrix(test_labels[19], y_pred)\n",
        "  print('confusion matrix at SNR = 18')\n",
        "  print(con_matrix)\n",
        "  draw(cnn_accuracy,'calssification using CNN')\n",
        "  return cnn_accuracy"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eywqisvVqbRL",
        "colab_type": "text"
      },
      "source": [
        "**Get the derivative and integration in time**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1tf5GMOiJzWz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "diff_data = np.zeros((20,60000,256))\n",
        "integration_data = np.zeros((20,60000,256))\n",
        "for i in range(20):\n",
        "  diff_data[i] = np.gradient(data[i],axis = -1)\n",
        "  integration_data[i] =integrate.cumtrapz(data[i] , axis =-1,initial =0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v2G9uZDJyEGr",
        "colab_type": "text"
      },
      "source": [
        "**We use raw , drivative , integration or their combination acording to what we found best in each classifier when we used the validatoin data**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XMEFmCeiruQ2",
        "colab_type": "text"
      },
      "source": [
        "**Calling random forest using raw data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GJxmNgce9yZE",
        "colab_type": "code",
        "outputId": "904431e0-d9fe-4ee1-c286-3ec565e6ed80",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 850
        }
      },
      "source": [
        "x_train , x_validation ,x_test ,y_train , y_validation ,y_test = splitting_data(data,y_ground,2)\n",
        "forest_accuracy = Random_forest(x_train , y_train , x_test ,y_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "at SNR: -20  Accuracy: 0.09938888888888889\n",
            "at SNR: -18  Accuracy: 0.09666666666666666\n",
            "at SNR: -16  Accuracy: 0.10244444444444445\n",
            "at SNR: -14  Accuracy: 0.10844444444444444\n",
            "at SNR: -12  Accuracy: 0.14872222222222223\n",
            "at SNR: -10  Accuracy: 0.21572222222222223\n",
            "at SNR: -8  Accuracy: 0.27094444444444443\n",
            "at SNR: -6  Accuracy: 0.31633333333333336\n",
            "at SNR: -4  Accuracy: 0.38216666666666665\n",
            "at SNR: -2  Accuracy: 0.4301111111111111\n",
            "at SNR: 0  Accuracy: 0.4817777777777778\n",
            "at SNR: 2  Accuracy: 0.5385\n",
            "at SNR: 4  Accuracy: 0.5899444444444445\n",
            "at SNR: 6  Accuracy: 0.6226111111111111\n",
            "at SNR: 8  Accuracy: 0.6428888888888888\n",
            "at SNR: 10  Accuracy: 0.6553888888888889\n",
            "at SNR: 12  Accuracy: 0.6616666666666666\n",
            "at SNR: 14  Accuracy: 0.6664444444444444\n",
            "at SNR: 16  Accuracy: 0.6703333333333333\n",
            "at SNR: 18  Accuracy: 0.664\n",
            "confusion matrix at SNR = 18\n",
            "[[ 906    3    0   21  121  119  490    0   25  115]\n",
            " [  16 1436    0    2  137  102   11    0   96    0]\n",
            " [   0    0 1597    0    0    0    0  203    0    0]\n",
            " [   0    0    1 1772    0    0    0   27    0    0]\n",
            " [ 136   52    0    1  793  612  197    0    7    2]\n",
            " [ 141   57    0    1  703  651  236    0    6    5]\n",
            " [ 546    6    0   18  173  190  795    0   17   55]\n",
            " [   0    0  893  131    0    0    0  776    0    0]\n",
            " [ 214   29    0    7   15   14   65    1 1451    4]\n",
            " [   0    0    0   25    0    0    0    0    0 1775]]\n",
            "Mean accuracy =  0.41822499999999996\n",
            "Accuracy at 0 SNR =  0.4817777777777778\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xYUmgoGlqq9Q",
        "colab_type": "text"
      },
      "source": [
        "**combine the raw data with the drivative data for DNN and CNN**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Plm9kMN9LrKU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "raw_diff = np.append(data, diff_data, axis = 2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GSj-t6UUs3RT",
        "colab_type": "text"
      },
      "source": [
        "**Delete the unused arrays**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LPVYoov6s2ks",
        "colab_type": "code",
        "outputId": "c6e7dda9-c31a-48cf-9966-e96eb9ce6ce8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "del diff_data\n",
        "del data\n",
        "del raw_data\n",
        "gc.collect()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2594"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ue5076kksTAA",
        "colab_type": "text"
      },
      "source": [
        "**Calling the DNN function using the combined raw data and drivative in time**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p7OLboJsAfUo",
        "colab_type": "code",
        "outputId": "10a3782e-700d-4d37-9358-a8d6aaeca7b5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 850
        }
      },
      "source": [
        "x_train , x_validation ,x_test ,y_train , y_validation ,y_test = splitting_data(raw_diff,y_ground,4)\n",
        "dnn_accuracy = DNN_predict(x_train , y_train , x_test ,y_test,4)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "at SNR: -20  Accuracy: 0.10355555555555555\n",
            "at SNR: -18  Accuracy: 0.109\n",
            "at SNR: -16  Accuracy: 0.11866666666666667\n",
            "at SNR: -14  Accuracy: 0.1685\n",
            "at SNR: -12  Accuracy: 0.24994444444444444\n",
            "at SNR: -10  Accuracy: 0.3417222222222222\n",
            "at SNR: -8  Accuracy: 0.4125\n",
            "at SNR: -6  Accuracy: 0.4621111111111111\n",
            "at SNR: -4  Accuracy: 0.4643333333333333\n",
            "at SNR: -2  Accuracy: 0.4715\n",
            "at SNR: 0  Accuracy: 0.45805555555555555\n",
            "at SNR: 2  Accuracy: 0.462\n",
            "at SNR: 4  Accuracy: 0.4592777777777778\n",
            "at SNR: 6  Accuracy: 0.4632777777777778\n",
            "at SNR: 8  Accuracy: 0.45444444444444443\n",
            "at SNR: 10  Accuracy: 0.4582777777777778\n",
            "at SNR: 12  Accuracy: 0.4618333333333333\n",
            "at SNR: 14  Accuracy: 0.4568333333333333\n",
            "at SNR: 16  Accuracy: 0.468\n",
            "at SNR: 18  Accuracy: 0.45322222222222225\n",
            "confusion matrix at SNR = 18\n",
            "[[ 224   50    0    2  222  316  391    0  229  366]\n",
            " [  34  977    1   12  125  160   66    4  290  131]\n",
            " [   0    0 1760    0    0    0    0   40    0    0]\n",
            " [   0    0    4 1640    0    0    0  146    0   10]\n",
            " [ 194   74    0    3  284  452  308    0  183  302]\n",
            " [ 194   69    0    0  282  434  326    0  192  303]\n",
            " [ 222   58    0    1  203  360  358    0  246  352]\n",
            " [   0    0 1210  126    0    0    0  462    0    2]\n",
            " [ 104  616    0    9  134  187  140    1  387  222]\n",
            " [  24   12    0    4   17   24   60    1   26 1632]]\n",
            "Mean accuracy =  0.37485277777777776\n",
            "Accuracy at 0 SNR =  0.45805555555555555\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e9Unh3ODsdj4",
        "colab_type": "text"
      },
      "source": [
        "**Calling the CNN function using the combined raw data and drivative in time**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S6pNPTwjDEvE",
        "colab_type": "code",
        "outputId": "0fa25b4f-2427-4018-b10b-1d41d0bba74d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 903
        }
      },
      "source": [
        "x_train , x_validation ,x_test ,y_train , y_validation ,y_test = splitting_data(raw_diff,y_ground,4)\n",
        "cnn_accuracy = CNN_predict(x_train , y_train , x_test ,y_test,4)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/keras/engine/sequential.py:111: UserWarning: `Sequential.model` is deprecated. `Sequential` is a subclass of `Model`, you can just use your `Sequential` instance directly.\n",
            "  warnings.warn('`Sequential.model` is deprecated. '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "at SNR: -20  Accuracy: 0.1\n",
            "at SNR: -18  Accuracy: 0.1\n",
            "at SNR: -16  Accuracy: 0.1\n",
            "at SNR: -14  Accuracy: 0.22616666666666665\n",
            "at SNR: -12  Accuracy: 0.30416666666666664\n",
            "at SNR: -10  Accuracy: 0.3878888888888889\n",
            "at SNR: -8  Accuracy: 0.4518333333333333\n",
            "at SNR: -6  Accuracy: 0.5125\n",
            "at SNR: -4  Accuracy: 0.5898888888888889\n",
            "at SNR: -2  Accuracy: 0.6178888888888889\n",
            "at SNR: 0  Accuracy: 0.5871111111111111\n",
            "at SNR: 2  Accuracy: 0.5788888888888889\n",
            "at SNR: 4  Accuracy: 0.6038333333333333\n",
            "at SNR: 6  Accuracy: 0.6275\n",
            "at SNR: 8  Accuracy: 0.6495\n",
            "at SNR: 10  Accuracy: 0.6786666666666666\n",
            "at SNR: 12  Accuracy: 0.542\n",
            "at SNR: 14  Accuracy: 0.6283333333333333\n",
            "at SNR: 16  Accuracy: 0.6664444444444444\n",
            "at SNR: 18  Accuracy: 0.6316666666666667\n",
            "confusion matrix at SNR = 18\n",
            "[[ 950    2    0    4  106   92  257    0   20  369]\n",
            " [   5 1495    0    3   39   48   20    2  188    0]\n",
            " [   0    0 1421    0    0    0    0  379    0    0]\n",
            " [   0    0    2 1685    0    0    0  107    0    6]\n",
            " [ 200   10    0    2  821  613   93    0   27   34]\n",
            " [ 267    9    0    0  769  564  120    0   36   35]\n",
            " [ 821    3    0    3  120  144  402    0   45  262]\n",
            " [   0    0  957  166    0    0    0  677    0    0]\n",
            " [ 107   70    1   11    8   20   13    5 1558    7]\n",
            " [   2    0    0    1    0    0    0    0    0 1797]]\n",
            "Mean accuracy =  0.47921388888888883\n",
            "Accuracy at 0 SNR =  0.5871111111111111\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D27YKFjZq5iB",
        "colab_type": "text"
      },
      "source": [
        "**combine the raw data with the drivative and integration data for the logistic regression and decision tree**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tGNLqEdaqrtz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "raw_diff_int = np.append(raw_diff , integration_data , axis =2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GrFlv3j5rDql",
        "colab_type": "text"
      },
      "source": [
        "**Delete the unused arrays**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-uA0Fqp0rDDL",
        "colab_type": "code",
        "outputId": "41d56e96-e0ec-4691-c121-7a1ada655220",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "del integration_data\n",
        "del raw_diff\n",
        "gc.collect()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "28664"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XkJ21RkkrfvN",
        "colab_type": "text"
      },
      "source": [
        "**Calling the logistic regression function using the combined raw data ,drivative and integration in time**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pCYYm4ol_nzm",
        "colab_type": "code",
        "outputId": "157699ac-4e6d-4452-f33c-099199637507",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 850
        }
      },
      "source": [
        "x_train , x_validation ,x_test ,y_train , y_validation ,y_test = splitting_data(raw_diff_int,y_ground,6)\n",
        "logistic_reg_accuracy = logistic_regression(x_train , y_train , x_test ,y_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "at SNR: -20  Accuracy: 0.1055\n",
            "at SNR: -18  Accuracy: 0.10827777777777778\n",
            "at SNR: -16  Accuracy: 0.12355555555555556\n",
            "at SNR: -14  Accuracy: 0.13361111111111112\n",
            "at SNR: -12  Accuracy: 0.14394444444444446\n",
            "at SNR: -10  Accuracy: 0.16466666666666666\n",
            "at SNR: -8  Accuracy: 0.17983333333333335\n",
            "at SNR: -6  Accuracy: 0.18522222222222223\n",
            "at SNR: -4  Accuracy: 0.1923888888888889\n",
            "at SNR: -2  Accuracy: 0.19283333333333333\n",
            "at SNR: 0  Accuracy: 0.19794444444444445\n",
            "at SNR: 2  Accuracy: 0.2078888888888889\n",
            "at SNR: 4  Accuracy: 0.18755555555555556\n",
            "at SNR: 6  Accuracy: 0.19527777777777777\n",
            "at SNR: 8  Accuracy: 0.19166666666666668\n",
            "at SNR: 10  Accuracy: 0.19311111111111112\n",
            "at SNR: 12  Accuracy: 0.19972222222222222\n",
            "at SNR: 14  Accuracy: 0.20444444444444446\n",
            "at SNR: 16  Accuracy: 0.19044444444444444\n",
            "at SNR: 18  Accuracy: 0.1998888888888889\n",
            "confusion matrix at SNR = 18\n",
            "[[ 203  244   12  183  270  298  226   53  137  174]\n",
            " [ 186  255   25  186  201  243  200  180  145  179]\n",
            " [   0   24 1204  127   13    0    0  367   65    0]\n",
            " [ 123  135  211  447   99  162  133  292  124   74]\n",
            " [ 221  244   15  199  256  285  213   76  116  175]\n",
            " [ 219  220   21  156  269  287  237   74  134  183]\n",
            " [ 253  220   16  193  236  293  203   62  135  189]\n",
            " [  16   25 1041  134    7    9   41  445   81    1]\n",
            " [ 229  250   20  164  245  278  212   95  131  176]\n",
            " [ 231  189   33  240  250  263  178  117  132  167]]\n",
            "Mean accuracy =  0.1748888888888889\n",
            "Accuracy at 0 SNR =  0.19794444444444445\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LioJlhS9fzIX",
        "colab_type": "text"
      },
      "source": [
        "**Delete the unused arrays**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Owh0wX6hfw6b",
        "colab_type": "code",
        "outputId": "9ff6f689-fc6a-4679-8c58-b03919e34bb8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "del  x_validation\n",
        "del y_validation\n",
        "gc.collect()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2833"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1NcTNcjftK0M",
        "colab_type": "text"
      },
      "source": [
        "**Calling the decision tree function using the combined raw data ,drivative and integration in time**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZeHzMbse6cKu",
        "colab_type": "code",
        "outputId": "2cc75ebf-e96e-415c-edd1-bd1fef4ad23b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 850
        }
      },
      "source": [
        "tree_accuracy = decision_tree(x_train , y_train , x_test ,y_test)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "at SNR: -20  Accuracy: 0.10116666666666667\n",
            "at SNR: -18  Accuracy: 0.10416666666666667\n",
            "at SNR: -16  Accuracy: 0.10933333333333334\n",
            "at SNR: -14  Accuracy: 0.11866666666666667\n",
            "at SNR: -12  Accuracy: 0.14838888888888888\n",
            "at SNR: -10  Accuracy: 0.18433333333333332\n",
            "at SNR: -8  Accuracy: 0.2222222222222222\n",
            "at SNR: -6  Accuracy: 0.25566666666666665\n",
            "at SNR: -4  Accuracy: 0.31444444444444447\n",
            "at SNR: -2  Accuracy: 0.328\n",
            "at SNR: 0  Accuracy: 0.3355\n",
            "at SNR: 2  Accuracy: 0.3512222222222222\n",
            "at SNR: 4  Accuracy: 0.38672222222222224\n",
            "at SNR: 6  Accuracy: 0.40994444444444444\n",
            "at SNR: 8  Accuracy: 0.4452777777777778\n",
            "at SNR: 10  Accuracy: 0.4598333333333333\n",
            "at SNR: 12  Accuracy: 0.475\n",
            "at SNR: 14  Accuracy: 0.49266666666666664\n",
            "at SNR: 16  Accuracy: 0.4958888888888889\n",
            "at SNR: 18  Accuracy: 0.5021666666666667\n",
            "confusion matrix at SNR = 18\n",
            "[[ 548   72    1   16  238  268  368   12  191   86]\n",
            " [  81 1030    0   11  177  167   67   10  238   19]\n",
            " [   0    0 1148    2    0    0    0  649    1    0]\n",
            " [   9    5   12 1607   10   13   10  106   14   14]\n",
            " [ 246  189    1   17  394  434  307    8  134   70]\n",
            " [ 274  188    0   19  408  417  283    8  134   69]\n",
            " [ 381   81    2   11  311  321  454   11  143   85]\n",
            " [   2    0  685  103    1    4    6  996    3    0]\n",
            " [ 164  186    2   17  117  147  162   16  969   20]\n",
            " [  90   20    1   13   43   41   86    7   23 1476]]\n",
            "Mean accuracy =  0.3120305555555555\n",
            "Accuracy at 0 SNR =  0.3355\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I0roj7drvdeV",
        "colab_type": "text"
      },
      "source": [
        "**Plotting all classifiers aganist each other**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1e-Wjj_ufbzO",
        "colab_type": "code",
        "outputId": "a7ef6f10-336b-4dcf-b5c4-f577c1efa7f9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "x_pts = []\n",
        "for i in range(-20,20, 2):\n",
        "    x_pts.append(i)\n",
        "x_pts = np.array(x_pts)\n",
        "plt.plot(x_pts, tree_accuracy)\n",
        "plt.plot(x_pts, logistic_reg_accuracy)\n",
        "plt.plot(x_pts, forest_accuracy)\n",
        "plt.plot(x_pts, dnn_accuracy)\n",
        "plt.plot(x_pts, cnn_accuracy)\n",
        "plt.grid(True)\n",
        "plt.title('Accuracies of {}'.format(type))\n",
        "plt.xlabel('SNR')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend(['decision tree', 'logistice regression', 'random forest', 'DNN','CNN'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}